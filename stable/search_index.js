var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SeriesAcceleration","category":"page"},{"location":"#SeriesAcceleration","page":"Home","title":"SeriesAcceleration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TODO: desciption here","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SeriesAcceleration]","category":"page"},{"location":"#SeriesAcceleration.acc_csum-Union{Tuple{T2}, Tuple{T1}, Tuple{AbstractVector{T1}, T2}} where {T1<:Number, T2<:SeriesAcceleration.SumHelper}","page":"Home","title":"SeriesAcceleration.acc_csum","text":"acc_sum(arr::AbstractArray{T1,1}, type::T2) where {T1 <: Number, T2 <: SumHelper}\n\narr specifies a 1D array of partial sums using a method specified by type\n\n\n\n\n\n","category":"method"},{"location":"#SeriesAcceleration.build_M_matrix-Tuple{AbstractVector{Int64}, AbstractVector{Int64}}","page":"Home","title":"SeriesAcceleration.build_M_matrix","text":"build_M_matrix(dom::AbstractArray{Int,1}, exponents::AbstractArray{Int,1})\n\nHelper function that build the matrix M used to fit data obtained for indices dom to a sum_nin exponents c_ni^n tail.\n\ndom specifies the number of terms for the partial sum, that are to be fitted. exponents specifies the exponents of sum_x in dom sum_p in exponents 1i^p that the partial sums should be fitted to.\n\nThe coefficients c_n are obtained by solving M c = b.  b can be constructed from the data using build_rhs.\n\n\n\n\n\n","category":"method"},{"location":"#SeriesAcceleration.build_weights_bender-Tuple{Int64, AbstractVector{Int64}, AbstractVector{Int64}}","page":"Home","title":"SeriesAcceleration.build_weights_bender","text":"buildweightsbender(nstart::Int, dom::AbstractArray{Int,1}, exponents::AbstractArray{Int,1})\n\nBuild weight matrix in closed form. See C. Bender 99, p. 375.  Fit coefficients can be obtained by multiplying w with data: a_k = W_kj g_j\n\n\n\n\n\n","category":"method"},{"location":"#SeriesAcceleration.build_weights_rohringer-Tuple{AbstractVector{Int64}, AbstractVector{Int64}}","page":"Home","title":"SeriesAcceleration.build_weights_rohringer","text":"buildweightsrohringer(dom::AbstractArray{Int,1}, exponents::AbstractArray{Int,1})\n\nBuild weight matrix i.e. W = M^-1 R with M from build_M_matrix and R_kj = frac1j^k. Fit coefficients can be obtained by multiplying w with data: a_k = W_kj g_j\n\n\n\n\n\n","category":"method"},{"location":"#SeriesAcceleration.rateOfConv-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Home","title":"SeriesAcceleration.rateOfConv","text":"rateOfConv(arr:AbstractArray{T, 1})\n\nEstimates rate of convergence alpha_n = fraclog (x_n+1 - x_n)(x_n - x_n-1)log (x_n - x_n-1)(x_n-1-x_n-2) from array. trace can be set to true, to obtain the roc for all partial sums.\n\n\n\n\n\n","category":"method"}]
}
